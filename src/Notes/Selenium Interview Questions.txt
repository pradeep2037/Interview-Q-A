
1)why findElement is present in both webdriver, webelement?

a)webDriver : Used to find an element on the entire page. Like telling to the selenium in the webpage find the element. 

			WebElement searchBox =  driver.findElement(By.id("search")).

  webElement : Used to find a child element inside an already-located element.
		

2)What is selenium ?

a)Selenium automates browsers.Using selenium we can automate web applications on browsers like chrome, edge, firefox.

3)what are its different selenium components?

a)1)Selenium WebDriver	:-	Automates browsers by interacting with elements.
  2)Selenium IDE, 
  3)Selenium Grid

4)What findElements?

a)This will focus on the element based on locator strategy

5)What are the different types of locators in selenium?

a)	Id		(By.id)
	Name		(By.name)
	Class Name	(By.className)
	Tag Name	(By.TagName)
	Link Text	(By.linkText)
	CSS Selector	(By.cssSelector)
	XPath		(By.xpath)

6)How do you handle dynamic elements in selenium?

a)Handling dynamic elements in Selenium can be tricky because their properties, like IDs or class names, may change with every session, or they may take time to load
  Here are the some strategies :-

	XPath or CSS Selectors:
	Waits (Implicit and Explicit):
	JavaScript Execution:
	Handle Exceptions:

7)What is findElement?

a)findElement focuses on finding only one element. If the element found, it returns the element. If the element not found, it throws NoSuchElementException.

8)What is findElements?

a)findElements focuses on finding multiple elements. If the elements are found, it returns a list of web elements. If the elements are not found, it returns an empty list.

9)How do you handle dropdowns in Selenium?

a)using Select Class

10)How do you perform mouse hover, drag-and-drop, and right-click actions?

a)Using the Action Class

11)What is Implicit Wait?

a)Implicit wait tells the WebDriver to wait for a certain amount of time while trying to find an element before throwing a NoSuchElementException if the element is not found immediately.   It is applied globally to all the elements.

12)What is Explicit Wait?

a)Explicit wait means we will apply to the specific element to wait for certain amount of time based on certain conditions, like the element being visible, clickable, or present.

13)What is Fluent Wait?

a)Fluent Wait is a custom wait we apply to the specific element same like a explicit wait. but it has some extra features like below

	withTimeout(15)		:	here we can give total wait time.
	
	pollingEvery(2)		:	to check every 2 seconds.

	ignoring(NoSuchElement)	:	ignoring this exception.	

14)How do you handle alerts, pop-ups, and authentication pop-ups?

a)Using JavaScript alerts like driver.switchTo().alert(). we can perform necessary actions like alert.accept(), alert.dismiss(), alert.sendkeys(). Alert is an interface.

15)How do you switch between multiple windows or tabs in selenium?

a)Using getWindowHandles(); Method.

16)How do you take a screenshot in Selenium WebDriver?

a)Using takeScreenshot interface

17)What is hybrid framework in selenium?

a)It is a combination of data-driven, keyword driven frameWorks and POM model.

18)what is page object model (POM)?

a)	1)In POM, we have different web pages, we create a separate class for each web page this is called as the page class.
	2)This page class contains the webelements nothing but variables to store(UI elements) and we define some methods to perform actions on webelements like .sendkeys(), .click().
	3)Then testScripts call these methods making tests more readable and maintainable. Instead of directly interacting with elements.

19)Difference between TestNg and Junit?

a)TestNG and Junit are both testing frameworks in Java.
	1)Junit is mainly used for basic unit testing to test individual methods. Whether the methods is working correctly or not.
	2)TestNG is more advanced and commonly used for Selenium automation 
		a)It supports priority for test order.
		b)It allows test dependencies
		c)It supports parallel test execution using .xml
		d)It generates detailed reports
		e)It supports @dataprovider to supply multiple sets of test data to a single test method for parameterized tests

20)What are the advantages of using Cucumber?

a)Cucumber is a tool it will help us to write test cases in simple English(Gherkin). So both technical and non-technical people can understand easily. It works with selenium the steps are reusable.

21)Explain Scenario, TestScenario, TestCase Scenario Outline, Examples in Cucumber?


a)Scenario: Login Functionality
          |
          |-- Test Scenario 1: Verify login with valid credentials
          |        |
          |        |-- Test Case:
          |              1. Open browser
          |              2. Navigate to login page
          |              3. Enter valid username
          |              4. Enter valid password
          |              5. Click on Login button
          |              6. Verify home page is displayed
          |
          |-- Test Scenario 2: Verify login with invalid credentials
          |        |
          |        |-- Test Case:
          |              1. Open browser
          |              2. Navigate to login page
          |              3. Enter invalid username
          |              4. Enter invalid password
          |              5. Click on Login button
          |              6. Verify error message is displayed
          |
          |-- Test Scenario 3: Verify login with blank fields
                   |
                   |-- Test Case:
                          1. Open browser
                          2. Navigate to login page
                          3. Leave username and password blank
                          4. Click on Login button
                          5. Verify "Username/Password required" message


Scenario : A high-level feature or functionality that we want to check in the application. 

Test Scenario : A particular case under that feature that we actually test.

Test Case : A series of steps we write to test that test scenario.

Scenario Outline : It is used when we want to run the same scenario multiple times with different sets of test data.

Examples : Data table for scenario Outline.


22)What are hooks in Cucumber?

a)Hooks are special methods in cucumber that run before or after each scenario. They help in setting up and cleaning up the tests environment automatically.

23)What is Data-Driven Framework?

a)If the test data is coming from external sources like (excel, json) etc., and this data is used to run our test scripts is called a Data-Driven Framework.

24)What is  Data Paramterization and how to achieve in TestNG?

a)Runing the same script with different sets of test data. using @DataProvider we can achieve it.

25)What is KeyWord-Driven Framework?

a)In a keyword Driven Framework we use keywords to tell the system what actions to perform in the test. These actions can be things like clicking a button, typing something.

	Mainly it has 3 types of keywords
		a)Application Keywords :- Actions like clicking or typing
		b)Generic keywords  :- Actions like waiting and closing the browser. It contains re-usable methods.
		c)Validation Keywords :- Checking the result whether it is correct or not.

26)How do we manage test execution reports in Selenium? Which tools do you use?

a)Using Extent Reports

27)Suppose your selenium test is failing randomly. How would you debug and fix it?

a)Using explicit waits, logs, and retry logic

28)What is the difference between the xpath and css?

a)Both XPath and CSs Selectors are used to find elements on a webpage.
	
	xpath	:	we can find an element using xpath : //div[@class='username'] and we can search elements both forwards and backwards in the DOM
. In CSS Selector only operates in the forward 			
			direction.
	
	css selector	:	If an element has a class name, use a dot() before it. If it has Id we use #      
				
				<div class="button">Click Me</div>

				CSS Selector : .button   (Selects all elements with class button)      

29)What is actions in selenium?

a)Action class is used to perform mouseOver, dragAndDrop, dragAndDropBy, ContextClick, DoubleClick these are miscelleneous actions.     

30)How to right click on a button using selenium?

a)Using ContextClick method we can perform right click actions.

31)What is maven and what are its advantages?

a)Maven is a tool used to build Java projects and manage dependencies using pom.xml.
 	1)It automatically downloads required JAR files
	1)Maintains standard folder structure
	2)Easily integrates with tools like selenium and Jenkins.
	
 Advantages : Instead of manually downloading and adding libraries like Selenium, JUnit we Just tell Maven which ones we need in a specific file(pom.xml) and it will take care of it.

32)What maven commands have you used? And how do you run a program using Maven?

a)	mvn clean 	: It will Delete all the old compiled files(like .class files) from the previous builds.

 	mvn test	: It Will runs our tests like JUnit or TestNG.  
	
	mvn verify	: It runs tests and then checks that everything is in the correct state(build tests etc.,).


MVN Test is used to run a program.


33)What reports have you used in your frame work?

a)Extent reports it provides beautiful, interactive HTML reports it supports logs, screenshots, pie-charts.

34)What is JavaScript Executor?

a)JavaScript Executor is an interface in selenium it allows us to execute JavaScript code it interacts directly with DOM where Selenium web driver can not do directly. Using JavaScript                executor we can perform actions like clicking, scrolling.

35)What is stale element exception and how do you handle?

a)It occurs when we try to interact with a web element that was found earlier in the Dom, but now not present in the current DOM due to a page reload or DOM refresh. 

	solution : reinitialize the WebElement/WebElements

36)What is NoSuchElementException?

a)If our xpath unable to locate element or elements we will get NoSuchElementException.

	Reason 1: if the locator strategy is incorrect 
	Solution 1: correct the locator strategy


	Reason 2: synchronization issue or time out or loading issue 
	Solution 2: introduce proper wait mechanism 

	Reason 3: if the element is present in a frame/iframe 
	Soultion 3: switch to that frame 


	Reason 4: if the element is present in another window/tab 
	Soultion 3: switch to window/tab 

	Reason 5: if the element is present in a shadowDOM
	Soultion 3: using Shadow DOM hanling or focusing on Shadow Root 


37)what is your project?

a)Its a BDD with cucumber api with pom model plus j unit as unit testing framework


38)Logging Mechanism?

a)we have used extent text class object which is present Bydefault in extentreports api or dependencies we are not using log4j.


39)What is your Selenium version?

a)Selenium version 4.27


40)What is your Chrome version?

a)chrome version 134.0


41)What is your project structure?

a)My project is a Maven-based Java Selenium Automation Framework developed using BDD Cucumber, followed the Page Object Model (POM) as a design pattern, and used JUnit as the testing tool.

📁 In src/main/java:

1) base package:

This contains the BaseTest class where I initialized the WebDriver, maximized the browser window, and launched the application using the URL, which is fetched from the  

application.properties file.

This setup method is reused in BasePage and step definition classes.

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

2) utils package:

Contains the Util class which loads test data from the application.properties file.

It uses FileInputStream and getProperty(key) to fetch values like base URL, username, and password.

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

3) exceptions package:

Contains a class for framework-defined exceptions, which helps in handling specific custom error scenarios.

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

📁 In src/test/java:

1) pages package:

Here I created separate classes for each webpage, called Page Classes.

All page classes extend a parent class called BasePage, which contains reusable methods like:

a)typing text

b)clicking buttons

c)selecting dropdown values

d)validating page title

These methods are reused in all child page classes.

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

2) runner package:

Contains the Runner class, which uses:

@RunWith(Cucumber.class) → tells JUnit to run tests with Cucumber

@CucumberOptions → where I configured:

path to feature files

glue for step definitions

tags to run specific scenarios

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

3) steps package:

Contains the step definition classes.

Here, each Gherkin step is mapped to a corresponding Java method using:

@Given

@When

@Then

These methods contain the logic to automate each step by calling methods from page classes.

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

📁 In src/test/resources:
 
1) features folder:

Contains all the .feature files written in Gherkin syntax (plain English).

These files define test scenarios that are easy to read and understand for everyone.

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

2) properties folder:

Contains the application.properties file, which holds environmental test data like:

Base URL

Login credentials

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

📄 pom.xml:
This file contains all the dependencies required for the framework such as:

Selenium WebDriver

Cucumber

JUnit

WebDriverManager

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


42)Explain the points you cover while writing the test cases?

a)First of all the focus of writing testing cases as per acceptance criteria making sure all the test cases are written in a way to test the acceptance criteria is met apart from that we focus on edge cases including both positive and negative test cases as well. 

43)What are the important things while reporting a bug?

a)Before raising a bug, I first check whether the issue has already been reported to avoid duplicates. I also re-test the scenario using different data and in different environments if needed, to confirm that it's a valid and consistent issue. Only after proper verification, I raise the bug with all necessary details for easy reproduction and resolution.

44)What is the difference between the relative xpath and absolute xpath?

a)Absolute path : It starts from the root node and goes through each node in the DOM until it reaches the desired element. starts with single forward slash/

Relative path : It starts from the current node or anywhere in the document to reach the desired element using attributes, text, or partial text. starts with double forward slashes

45)What is agile methodology?

a)Agile methodology is a way of developing software step by step, instead of making the whole project at once.

	1)we divide the work into small parts called sprints(usually 1-2 weeks)
	
	2)In each sprint, we plan, develop, test and deliver a smaller part of the product.

	3)After each sprint, we get feedback from the client or product owner and make changes if needed.

46)What is sprint?

a)A sprint is a short, fixed period of time (usually 1 to 4 weeks) in Agile methodology during which a team works to complete a specific set of tasks or features.

47)What is scrum?

a)Scrum is a type of Agile framework used to manage and complete complex software projects in a structured way. It helps teams work together, break big projects into smaller tasks, and deliver work in short cycles called sprint(usually 1-2 weeks).

	SCRUM HAS 3 MAIN ROLES :

	1)Product Owner : Decides what to build (creates and manages the backlog).

	2)Scrum Master : Guides the team and remove obstacles.

	3)Development Team : Builds and tests the product.


	KEY SCRUM EVENTS (or) Differnt types of agile meeting (or) Sprint, Scrum Ceremonies

	1)Sprint Planing : Decide what to do in the upcoming sprint.

	2)Daily StandUp : Short daily meeting to discuss work progress.

	3)Sprint Review : Show completed work to stakeholders.

	4)Sprint Retrospective : Team discuss what went well and what to improve.


48)why do you use PageFactory.initElements()?, What happens if you don't use PageFactory?, How are the elements initialized in POM?

a)
	1)In my project we used the POM design, where each page has separate class. for ex:- we have a LoginPage class that contains webElements like username, password, and login button. 	2)But just creating an  objects using new LoginPage() doesn't automatically initialise these elements. If we try to use them will get a NullpointerException. 
	3)To solve this, we use PageFactory.initElements(driver, this). This method initializes all the webElements so that we can perform actions like sendkeys() or click().
	4)We used this initialization in our base page using super() we called in the login page. Later created an object of the LoginPage class in the stepdefinition or wherever needed,



		@FindBy(id = "uername")
		WebElement username;

		This only declares a variable - it does not connect it to any real element on the webpage.

		To actually find and interact with the element in the DOM (Document Object Model), we need to initialize it - that's where

		PageFactory.initElements(driver, this); comes in, It tells selenium "Hey, go find all the elements marked with @FindBy and link them to real elements on the page using 		this driver.

		If you don't initialize and try username.sendkeys("Pradeep"), you will get a NullPointerException.




49)What is mean by element click intercepted exception, and how do you fix it?

a)Means selenium tried to click on a web element, but another element is covering as a result we get click intercepted exception, using javascript we may fix it.


50)Have you used OOPS in your framework?

a)CLASSES & OBJECTS :- In my selenium framework, I used classes & objects. For each web page, I created a separate class that contains the webelements and related methods. I created objects of those classes in my step definitions or test classes using those objects i called their methods to perform actions.

	INHERITANCE   :- I implemented inheritance in my project. My step definition classes extend the BaseClass.java. so they can directly use the WebDriver instance and browser related 			methods without re-writing them.

	POLYMORPHISM  :- I used polymorphism in my selenium framework like driver.switch().frame() where the same method works differently based on what I pass like int, string, 				webelement.


										(or)



			public class WaitHelper {

   					 // Overloaded method 1: Wait for an element with default timeout
  					 public void waitForElement(WebElement element) {
       					 WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
        				 wait.until(ExpectedConditions.visibilityOf(element));
    			}

   					 // Overloaded method 2: Wait for an element with custom timeout
   			 		 public void waitForElement(WebElement element, int timeoutInSeconds) {
        				 WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(timeoutInSeconds));
       					 wait.until(ExpectedConditions.visibilityOf(element));
    			}
				}

			In my selenium BDD framework, i used method overloading in utility class. For Example:- in WaitHelper, I created 2 waitForElement() methods one takes only a 				webElement and waits with a default timeout, and other methods takes both webElement and timeOut parameters to allow flexible waits. so here method name is same, 			but parameters are different.

			

	ENCAPSULATION :- I used Encapsulation in the Page Object Model. For Example:- In my LoginPage.Java class, I kept all the WebElements private and I restricted direct access to them. 			 They can only be accessed and modified through public methods(Getters & Setters) like enterUsername() and clickLogin().
	


	ABSTRACTION   :-I used selenium built-in abstractions like findElement(), findElements(), and getTitle() in my framework.

	Interference  :- In Selenium, WebDriver is an interface that defines all the browser interaction methods like get(), findElement(), getTitle() etc. RemoteWebDriver is a concrete 			 class extend the webdriver interface this is the actual implementation of interface. Again Browser Specific drivers concrete classes like Chromium, FireFox, Safari 			 extend the RemoteWebDriver. In the ChromiumDriver again we have Chrome, Edge so I'm using chrome driver which indirectly i'm using the interface.


51)What is TestNG Suite?

a)In TestNg, a suite is a collection of test cases or classes that we want to run together. It's defined in an XML file (commonly named testing.xml) and allows us to do.

	1)Grouping multiple test classes.
	
	2)Controlling the execution order.

	3)Set parallel execution.

	4)Passing parameters to tests.

	5)we can include/exclude specific tests.



52)Explain Selenium Architecture?

a)I write test scripts in Java Using Selenium client library. The Selenium client library converts each test script line into JSON format and sends them as HTTP requests to the specific browser driver(chrome, edge, firfox). This driver communicates with the actual browser and perform the actions and send the results back to the selenium.



53)How do you integrate selenium with your test automation framework?

a)I integrated selenium with BDD using Cucumber, and used JUnit as the test runner. I followed the POM as a design pattern to maintain clean separation between page locators and test logic. I created a BaseClass to initialize the WebDriver and launch the application. I also developed utility classes for reusable methods like reading data from excel and screenshots, and I used extent reports for generating detailed test reports.


54)What is mean by productOwner?

a)He is the person who gives requirements to the team and decides which task is more important to build first.


55)How do you prioritize tasks from the product backlog?

a)I prioritize the most important task first, and talk to the product owner to decide. If one task is blocking others, I complete it early.


56)Difference between driver.quit() vs driver.close()?

a)driver.quit() 		:	to close all window tabs.

  driver.close()		:	to close current tab.



57)Difference between assert and verify?

a)assert	: it will check the expected output should met the actual output if doesn't match the test will fail.

  verify	: it is also like checking the tests, even if the test fails it will not stop, it will continue checking other tests also.


58)What is compatibility testing?

a)Testing the application on different browsers(chrome, firefox,edge) and different devices(mobile, desktop).


59)Difference between verification and validation?

a)verification		:	It means checking the documents, designs to catch any mistakes like reading a test cases if its written properly or not?

 validation		:	It means testing the application to see whether it is working or not as expected.



60)when do you use exploratory testing?

a)a)when requirements are unclear

  b)when we have less time for writing test cases.


61)How do you prioritize test cases?

a)Based on business impact(login, payments), customer requirements & deadlines.



62)what are Listeners in TestNG/Selenium?

a)Listeners are interfaces that listen to events during test execution(like test pass/fail/start)

	useful for
	
	1)Logging.

	2)SCreenshots

	3)Reporting.


63)How to set test priority in cucumber?

a)cucumber doesn't support priority like TestNg. In cucumber, step execution order is defined by the order of steps written in the .feature file, not by annotations.


64)How to run parallel tests in selenium?

a)we can run parallel tests by configuring all the tests in the testing.xml file.


65)How do you import test data from an excel file for different scenario outlines in a feature file?

a)we use APACHE POI to read excel data and pass it to step definitions using DataProvider.



66)what is backround in selenium cucumber BDD?

a)Background is used to define common steps that are run before every scenario in a feature file.

Feature: Login Feature

Background:
  Given The browser is open
  And User is on the login page

Scenario: Login with valid user
  When User enters valid credentials
  Then Dashboard is displayed

Scenario: Login with invalid user
  When User enters wrong credentials
  Then Error message is shown


67)Annotations in TestNG and Junit?

a)Junit Annotations

	@Before
	Runs before every test (scenario).
	Use it to open browser, setup test data, etc.

	@Before
	public void setup() {
    	System.out.println("👨‍💻 Launching browser before each scenario");
	}

        ----------------------------------------------------------------------------------------------
	
	@After
	Runs after every test (scenario).
	Use it to close browser, clear cookies, take screenshot if failed, etc.

	@After
	public void teardown() {
    	System.out.println("🧹 Closing browser after each scenario");
	}	
	
	----------------------------------------------------------------------------------------------

	@BeforeClass
	Runs once before all tests in a class.
	It must be static.
	Use it to set up things like database connection, report creation.

	@BeforeClass
	public static void initSuite() {
    	System.out.println("📘 Runs once before all tests");
	}

	----------------------------------------------------------------------------------------------

	@AfterClass
	Runs once after all tests in a class.
	Must also be static.
	Good for closing resources or generating final report.

	@AfterClass
	public static void cleanupSuite() {
    	System.out.println("📕 Runs once after all tests");
	}


 TestNG Annotations

	@BeforeMethod
	Runs before each test method (like @Test).
	Use to launch browser before each test.

	@BeforeMethod
	public void launchBrowser() {
    	System.out.println("🟢 Open browser before test");
	}

	----------------------------------------------------------------------------------------------

	@AfterMethod
	Runs after each test method.
	Use to close browser.

	@AfterMethod
	public void closeBrowser() {
    	System.out.println("🔴 Close browser after test");
	}


68)Which TestNG listeners have you  used in your automation framework?

a)ITestListener for taking screenshots on test failure, logging test start/end.


69)What is User Story?

a)A small feature or requirement described from the end-user perspective.


70)What is WebDriver?

a)WebDriver is an interface in selenium that provides browser interaction methods like getDriver(), findElement(), sendKeys()


71)How would you automate login functionality for a website?

Launch browser.

Navigate to login page.

Enter username and password.

Click on login button.

Add assertions to verify successful login (e.g., check for dashboard text or URL).

java
Copy
Edit
driver.findElement(By.id("username")).sendKeys("ulser");
driver.findElement(By.id("password")).sendKeys("pass");
driver.findElement(By.id("loginBtn")).click();
Assert.assertTrue(driver.getCurrentUrl().contains("dashboard"));


72)How you do parallel execution in TestNG?

a)You run multiple test classes, methods, or tests at the same time, rather than one after another — and this is controlled via the .xml file.


---

🔧 Steps to run classes in parallel in TestNG:

1. Create your test classes: Example – LoginTest.java, DashboardTest.java, RegistrationTest.java.


2. Convert to TestNG Suite XML (right-click > Convert to TestNG if using IntelliJ or Eclipse).


3. In your generated testng.xml, do the following:



<suite name="RegressionSuite" parallel="classes" thread-count="3">
    <test name="RegressionTests">
        <classes>
            <class name="com.yourpkg.LoginTest" />
            <class name="com.yourpkg.DashboardTest" />
            <class name="com.yourpkg.RegistrationTest" />
        </classes>
    </test>
</suite>

TestNG parallel execution means including the test classes in a TestNG XML file, setting parallel="classes" in the <suite> tag, adding thread-count, and running it as a TestNG suite to execute the classes in parallel.


73)Is it possible with Cucumber + Junit?

a)Yes, parallel execution is possible in Cucumber with JUnit.
We use the Cucumber JVM Parallel Plugin to generate separate runner files for each feature file or scenario.
Then we use the Maven Surefire Plugin to execute those generated runner files in parallel by configuring the threadCount and parallel mode.


74)Why diver is present after (Javascriptexecutor) ?

a)"Think of driver as a person who has both a car driving license and a crane operating license.
But when we introduce them to Java, we only say: ‘This is my car driver.’
Later, if we want them to operate the crane, we have to reintroduce them as: ‘Oh, by the way, this same person is also a crane operator.’ That reintroduction is called casting."


ChromeDriver implements both the WebDriver and JavascriptExecutor interfaces. When we declare driver as a WebDriver, Java only knows it can perform WebDriver actions. By casting (JavascriptExecutor) driver, we are telling Java that this same object also has JavascriptExecutor capabilities, so we can call executeScript()."


WebDriver → An interface that defines the standard browser automation methods like get(), findElement(), click(), etc.

JavascriptExecutor → Another interface that defines methods to execute JavaScript in the browser, like executeScript() and executeAsyncScript().

ChromeDriver → A class that implements both WebDriver and JavascriptExecutor (and some other interfaces internally like TakesScreenshot).













-----------------------------------------------
x-path based on tagname and text on element
-----------------------------------------------

"//div[@class='navFooterColHead' and text()='Make Money with Us']/parent::div"

//td[text()='Important Note:']
	(or)

//td[@class='build_title']

-------------------------------------
x-path using contains function
-------------------------------------

//img[@src='img/google-play.png']
	     (or)
//tagname[contains(@attribute,'subset in the value')]
//img[contains(@src,'google-play')]


//tagname[contains(text(),'subset in the value')]
//a[contains(text(),'User Registration')]


		(or)
//a[@href='Register.php']

---------------------------------------------------------------------------------------------------

<tag1>
   <tag2>
   <tag3>
        <tag5>
<tag4>

If you want to go from child to parent class 

/parent::tagName


If you want to go from parent to child class 

/child::tagName


If you want to come from parent to grand Child like tag1 to tag5
/descendant::tag5

//div[@class='navFooterLinkCol navAccessibility']/descendant::a[text()='Supply to Amazon'],

If you want to reach tag2 from tag3 like below ex:

tag2
tag3
/preceding-sibling::tag2


If you want to reach from tag5 to tag1

tag5/ancestor::tag1


55)Which wait concept are you using?

solution : explicit wait using webdriver wait.



//div/table/tbody/tr[1]/td[1]
//div/table/tbody/tr[1]/td[8]



//div/table/tbody/tr[1]/td[1]
//div/table/tbody/tr[36]/td[1]


