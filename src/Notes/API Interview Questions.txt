1)What is an API?

a)It is an interface / component developed to enable data transfer / data communication accross multiple modules in an enterprise app.

2)API'S can talk via HTML, XML, JSON

3)What is protocols?

	http	: unsecured
	https	: secured

4)Have you automated test cases?

a)I automated test cases using postman.


5)How you run API collections in your postman?

a)I run API collections and generate reports in postman using newman.


========================================================================= API TESTING USING POSTMAN ========================================================================================

TO GET LIST OF USERS
---------------------
// 1)verifying response code is 200 ok
pm.test("Verify if Status code is 200 ok", function () {
    pm.response.to.have.status(200);    
});

//2)verifying response body is received
pm.test("Verify if response body is received", function(){
    pm.response.to.have.body();
});

//3)verifying response time <2 seconds
pm.test("Verify if response time < 2 secs", function () {
    pm.expect(pm.response.responseTime).to.be.below(2000);
});

//4)verifying response body is in JSON format
pm.test("Verify if response body is in JSON format", function () {
   pm.response.to.have.header("Content-Type","application/json; charset=utf-8")
});

//5)verifying response body containing mandatory fields
pm.test("Verifying response body containing mandatory fields", function(){
    pm.expect(pm.response.text()).to.includes("id","name","email","gender","status")
});

===========================================================================================================================================================================================

TO CREATE USER
---------------
// 1)verifying response code is 201 ok
pm.test("Verify if Status code is 201 ok", function () {
    pm.response.to.have.status(201);    
});

//2)verifying response body is received
pm.test("Verify if response body is received", function(){
    pm.response.to.have.body();
});

//3)verifying response time <2 seconds
pm.test("Verify if response time < 2 secs", function () {
    pm.expect(pm.response.responseTime).to.be.below(2000);
});

//4)verifying response body is in JSON format
pm.test("Verify if response body is in JSON format", function () {
   pm.response.to.have.header("Content-Type","application/json; charset=utf-8")
});

//5)verifying response body containing mandatory fields
pm.test("Verifying response body containing mandatory fields", function(){
    pm.expect(pm.response.text()).to.includes("id","name","email","gender","status")
});


//api changing
let res = pm.response.json();
let resId = res.id;
pm.globals.set("globalResId", resId);

===========================================================================================================================================================================================

TO UPDATE USER
---------------
// 1)verifying response code is 200 ok
pm.test("Verify if Status code is 200 ok", function(){
    pm.response.to.have.status(200);
})


//2)verifying response time <2 seconds
pm.test("Verify if response time < 2 secs", function(){
    pm.expect(pm.response.responseTime).to.below(2000);
})


//3)verifying response body is received
pm.test("Verify if response body is received", function(){
    pm.response.to.have.body();
});

//4)verifying response body is in JSON format
pm.test("Verify if response body is in JSON format", function () {
   pm.response.to.have.header("Content-Type", "application/json; charset=utf-8")
});

//5)verifying response body is updated or not
pm.test("Verify if response body updated or not!", function(){
    let jsonData = pm.response.json();
    pm.expect(jsonData.status).to.eql("active")
})

===========================================================================================================================================================================================

TO DELETE USER
---------------
// 1)verifying response code is 204 ok
pm.test("Verify if Status code is 204", function(){
    pm.response.to.have.status(204);
})

//2)verifying response time <2 seconds
pm.test("Verify if response time < 2 secs", function(){
    pm.expect(pm.response.responseTime).to.below(2000);
})

//3)verifying response should be empty
pm.test("Verify response must be empty", function(){
    pm.expect(pm.response.text()).to.be.empty;
})

===========================================================================================================================================================================================

6)What is postman, and why is it used for API testing?

a)Postman is a tool used to test and debug RESTFUl APIs. It allows testers and developers to send HTTP requests like GET, PUT, POST, DELETE and validate responses easily.


7)What are headers in an API request?

a)Headers provide metadata for the response. For example, content-type tells the server about the format of the data, and Authorization provides credentials like tokens.


8)How do you set Authorization headers in postman?

a)I can add it manually under the headers tab with
	key	: Authorization
	value	: Bearer <token>


9)How do you write tests in postman using JavaScript?

a)In the Tests tab, we use the pm object.


10)how do you pass data between requests in postman?

a)I extract values from one response using scripts and storing them in environment or global variables. Then, in the next request, we can use it.


11)What is a collection in postman?

a)A collection is a group of saved requests organized together.


12)How do you validate response body values in postman?

a)I use test scripts in postman to validate response data. For ex:- to check if the name is "Pradeep"

	pm.test("Name is correct", function(){
		let jsonData = pm.response.json():
	pm.expect(jsonData.name).to.eql("Pradeep");
	});


13)Explain status codes like 200, 201, 400, 401, 404, 500?

a)	200	:	ok			-	Request Successful.
	201	:	Created			-	New resource created.
	400	:	Bad Request		-	Client - side error.
	401	:	Unauthorized		-	Missing/Invalid authentication.
	404	:	Not Found		-	Resource doesn't exist
	500	:	Internal Server Error	-	Server crashed.


14)What is Jenkins? Why do we use it in automation testing?

a)Jenkins is an open-source tool used for continuous integration. It automatically run our Selenium test cases instead of running manually.


15)How did you integrate your Selenium test suite with Jenkins?

a)	1)At First I create a Freestyle job in Jenkins.
	2)Linked it with my GitHub repo where the code is stored.
	3)In the build section, I added this command, mvn clean test.
	4)And after saving the job i will run it clicking on build now. or i will schedule it.


16)How do you trigger your regression test suite in Jenkins?

a)	Manually - clicking the 'build now' button.
	Automatically - by setting a schedule using cron language in the configuration.

 
17)Why do we do API Testing?

API Testing checks the backend logic of the application. Even if the UI looks fine, if the backend APIs are not working properly, the whole system can fail.

For example, suppose a user enters the correct details in the login form. After clicking the Login button, the message "Login Successful" is shown. But the system actually depends on the API to send the correct user information.

If the API sends incorrect or no data, then:

The user may not be able to see the dashboard.

They may not get access to the features they are supposed to use.


That's why API Testing is important to make sure the application works correctly behind the scenes.


18)Whenever we create rest assured test cases by default it will follow BDD.

19)In RestAssured Automation test case we can divide into three sections

	Given		section
	
	When		section

	Then		section


In the Given section :- It contains pre - requisites

	content- type, set cookies, add auth, add param, set headers info etc ...

In the When section :- It contains requests

	get, post, put, delete

In the Then section :- It contains validations

	validating status code, extract response, extract headers & cookies, response body...



20)How will you convert Pojo to Json format and Json to POjo format and which package or which binding or which class you will use?

a)Using Jackson API or Jackson Package along with the object mapper class.


21)Difference between authentication & authorization?

a)Authentication : - Authentication means it will check whether the user is valid or not.

 Authorization   : - Authorization means the user is valid. we are checking access permissions to the authenticated users.


22)What is Pojo?

a)plane older java object


23)What is JSON?

a)JavaScript object notation


24)What is Serialization?

a)Converting of Java Object into Json Object/Json String is called Serialization.


25)What is De-Serialization?

a)Converting of Json Object/Json String into Java Object is called De-Serialization.


26)What is Rest Assured? Why we use?

a)RestAssured is a java library used to test RESTFUL APIs. It help us to send requests like get, put, post, delete and validate responses easily.


27)What are some commonly used methods in the Rest Assured API?

a)

given(), when(), then()

body(), header(), queryParam(), pathParam()

statusCode(), log().all(), extract().response()

get(), post(), put(), delete()



28). How do you log the complete request and response in Rest Assured?

a)then().statusCode(200).log().all();  //using log().all()


29)How do you validate JSON response values?

a)Using .body() and JsonPath : .body("booking.firstname", equalTo("Pradeep"))


30)How do you test APIs that require authentication (OAuth 1.0 / 2.0, JWT token, etc.)?

a)given().auth().oauth2(token)
.when().get("/booking")
	
	or

.header("Authorization", "Bearer " + token)


31)Can you explain the architecture of your API testing framework?

a)

My framework has:

BaseTest class – to load properties, base URI

Payload classes – for request bodies (POJOs)

Utils – for reusable methods

Tests – TestNG test classes

Reports – ExtentReports integrated

Logging – via Log4j2

Config – .properties for routes and env

 
32) How do you test negative scenarios like 400, 401, 404, 500?

400: Bad Request – send invalid input

401: Unauthorized – don’t send token

404: Not Found – request wrong URL

500: Internal Server Error – trigger a crash (if possible)


33)Full form of REST?
➤ Representational State Transfer


34)REST Assured – Purpose of RequestSpec and ResponseSpec

RequestSpec: Reusable common request setup (base URI, headers).

ResponseSpec: Reusable response expectations (status code, response time).




