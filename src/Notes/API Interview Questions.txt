1)What is an API?

a)It is an interface / component developed to enable data transfer / data communication accross multiple modules in an enterprise app.

2)API'S can talk via HTML, XML, JSON

3)What is protocols?

	http	: unsecured
	https	: secured

4)Have you automated test cases?

a)I automated test cases using postman.


5)How you run API collections in your postman?

a)I run API collections and generate reports in postman using newman.

===========================================================================================================================================================================================
TO GET LIST OF USERS
---------------------
// 1)verifying response code is 200 ok
pm.test("Verify if Status code is 200 ok", function () {
    pm.response.to.have.status(200);    
});

//2)verifying response body is received
pm.test("Verify if response body is received", function(){
    pm.response.to.have.body();
});

//3)verifying response time <2 seconds
pm.test("Verify if response time < 2 secs", function () {
    pm.expect(pm.response.responseTime).to.be.below(2000);
});

//4)verifying response body is in JSON format
pm.test("Verify if response body is in JSON format", function () {
   pm.response.to.have.header("Content-Type","application/json; charset=utf-8")
});

//5)verifying response body containing mandatory fields
pm.test("Verifying response body containing mandatory fields", function(){
    pm.expect(pm.response.text()).to.includes("id","name","email","gender","status")
});

===========================================================================================================================================================================================

TO CREATE USER
---------------
// 1)verifying response code is 201 ok
pm.test("Verify if Status code is 201 ok", function () {
    pm.response.to.have.status(201);    
});

//2)verifying response body is received
pm.test("Verify if response body is received", function(){
    pm.response.to.have.body();
});

//3)verifying response time <2 seconds
pm.test("Verify if response time < 2 secs", function () {
    pm.expect(pm.response.responseTime).to.be.below(2000);
});

//4)verifying response body is in JSON format
pm.test("Verify if response body is in JSON format", function () {
   pm.response.to.have.header("Content-Type","application/json; charset=utf-8")
});

//5)verifying response body containing mandatory fields
pm.test("Verifying response body containing mandatory fields", function(){
    pm.expect(pm.response.text()).to.includes("id","name","email","gender","status")
});


//api changing
let res = pm.response.json();
let resId = res.id;
pm.globals.set("globalResId", resId);

===========================================================================================================================================================================================

TO UPDATE USER
---------------
// 1)verifying response code is 200 ok
pm.test("Verify if Status code is 200 ok", function(){
    pm.response.to.have.status(200);
})


//2)verifying response time <2 seconds
pm.test("Verify if response time < 2 secs", function(){
    pm.expect(pm.response.responseTime).to.below(2000);
})


//3)verifying response body is received
pm.test("Verify if response body is received", function(){
    pm.response.to.have.body();
});

//4)verifying response body is in JSON format
pm.test("Verify if response body is in JSON format", function () {
   pm.response.to.have.header("Content-Type", "application/json; charset=utf-8")
});

//5)verifying response body is updated or not
pm.test("Verify if response body updated or not!", function(){
    let jsonData = pm.response.json();
    pm.expect(jsonData.status).to.eql("active")
})

===========================================================================================================================================================================================

TO DELETE USER
---------------
// 1)verifying response code is 204 ok
pm.test("Verify if Status code is 204", function(){
    pm.response.to.have.status(204);
})

//2)verifying response time <2 seconds
pm.test("Verify if response time < 2 secs", function(){
    pm.expect(pm.response.responseTime).to.below(2000);
})

//3)verifying response should be empty
pm.test("Verify response must be empty", function(){
    pm.expect(pm.response.text()).to.be.empty;
})

===========================================================================================================================================================================================

6)What is postman, and why is it used for API testing?

a)Postman is a tool used to test and debug RESTFUl APIs. It allows testers and developers to send HTTP requests like GET, PUT, POST, DELETE and validate responses easily.


7)What are headers in an API request?

a)Headers provide metadata for the response. For example, content-type tells the server about the format of the data, and Authorization provides credentials like tokens.


8)How do you set Authorization headers in postman?

a)I can add it manually under the headers tab with
	key	: Authorization
	value	: Bearer <token>


9)How do you write tests in postman using JavaScript?

a)In the Tests tab, we use the pm object.


10)how do you pass data between requests in postman?

a)I extract values from one response using scripts and storing them in environment or global variables. Then, in the next request, we can use it.


11)What is a collection in postman?

a)A collection is a group of saved requests organized together.


12)How do you validate response body values in postman?

a)I use test scripts in postman to validate response data. For ex:- to check if the name is "Pradeep"

	pm.test("Name is correct", function(){
		let jsonData = pm.response.json():
	pm.expect(jsonData.name).to.eql("Pradeep");
	});


13)Explain status codes like 200, 201, 400, 401, 404, 500?

a)	200	:	ok			-	Request Successful.
	201	:	Created			-	New resource created.
	400	:	Bad Request		-	Client - side error.
	401	:	Unauthorized		-	Missing/Invalid authentication.
	404	:	Not Found		-	Resource doesn't exist
	500	:	Internal Server Error	-	Server crashed.
