1)What is an API?

a)It is an interface / component developed to enable data transfer / data communication accross multiple modules in an enterprise app.

2)API'S can talk via HTML, XML, JSON

3)What is protocols?

	http	: unsecured
	https	: secured

4)Have you automated test cases?

a)I automated test cases using postman.


5)How you run API collections in your postman?

a)I run API collections and generate reports in postman using newman.

===========================================================================================================================================================================================
TO GET LIST OF USERS
---------------------
// 1)verifying response code is 200 ok
pm.test("Verify if Status code is 200 ok", function () {
    pm.response.to.have.status(200);    
});

//2)verifying response body is received
pm.test("Verify if response body is received", function(){
    pm.response.to.have.body();
});

//3)verifying response time <2 seconds
pm.test("Verify if response time < 2 secs", function () {
    pm.expect(pm.response.responseTime).to.be.below(2000);
});

//4)verifying response body is in JSON format
pm.test("Verify if response body is in JSON format", function () {
   pm.response.to.have.header("Content-Type","application/json; charset=utf-8")
});

//5)verifying response body containing mandatory fields
pm.test("Verifying response body containing mandatory fields", function(){
    pm.expect(pm.response.text()).to.includes("id","name","email","gender","status")
});

===========================================================================================================================================================================================

TO CREATE USER
---------------
// 1)verifying response code is 201 ok
pm.test("Verify if Status code is 201 ok", function () {
    pm.response.to.have.status(201);    
});

//2)verifying response body is received
pm.test("Verify if response body is received", function(){
    pm.response.to.have.body();
});

//3)verifying response time <2 seconds
pm.test("Verify if response time < 2 secs", function () {
    pm.expect(pm.response.responseTime).to.be.below(2000);
});

//4)verifying response body is in JSON format
pm.test("Verify if response body is in JSON format", function () {
   pm.response.to.have.header("Content-Type","application/json; charset=utf-8")
});

//5)verifying response body containing mandatory fields
pm.test("Verifying response body containing mandatory fields", function(){
    pm.expect(pm.response.text()).to.includes("id","name","email","gender","status")
});


//api changing
let res = pm.response.json();
let resId = res.id;
pm.globals.set("globalResId", resId);

===========================================================================================================================================================================================

TO UPDATE USER
---------------
// 1)verifying response code is 200 ok
pm.test("Verify if Status code is 200 ok", function(){
    pm.response.to.have.status(200);
})


//2)verifying response time <2 seconds
pm.test("Verify if response time < 2 secs", function(){
    pm.expect(pm.response.responseTime).to.below(2000);
})


//3)verifying response body is received
pm.test("Verify if response body is received", function(){
    pm.response.to.have.body();
});

//4)verifying response body is in JSON format
pm.test("Verify if response body is in JSON format", function () {
   pm.response.to.have.header("Content-Type", "application/json; charset=utf-8")
});

//5)verifying response body is updated or not
pm.test("Verify if response body updated or not!", function(){
    let jsonData = pm.response.json();
    pm.expect(jsonData.status).to.eql("active")
})

===========================================================================================================================================================================================

TO DELETE USER
---------------
// 1)verifying response code is 204 ok
pm.test("Verify if Status code is 204", function(){
    pm.response.to.have.status(204);
})

//2)verifying response time <2 seconds
pm.test("Verify if response time < 2 secs", function(){
    pm.expect(pm.response.responseTime).to.below(2000);
})

//3)verifying response should be empty
pm.test("Verify response must be empty", function(){
    pm.expect(pm.response.text()).to.be.empty;
})

===========================================================================================================================================================================================


